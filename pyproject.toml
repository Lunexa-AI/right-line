[tool.poetry]
name = "rightline"
version = "0.1.0"
description = "WhatsApp-first legal copilot for Zimbabwe"
authors = ["RightLine Team <hello@rightline.zw>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/Lunexa-AI/right-line"
repository = "https://github.com/Lunexa-AI/right-line"
documentation = "https://github.com/Lunexa-AI/right-line/blob/main/README.md"
keywords = ["legal", "nlp", "search", "zimbabwe", "whatsapp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Legal Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Text Processing :: Linguistic",
    "Framework :: FastAPI",
]
packages = [
    { include = "api" },
    { include = "libs" },
]

[tool.poetry.dependencies]
python = "^3.11"
# Core Framework (Serverless)
fastapi = "^0.111.0"
gunicorn = "^22.0.0"
pydantic = "^2.8.0"
pydantic-settings = "^2.4.0"

# HTTP & Async
httpx = "^0.27.0"
aiofiles = "^24.1.0"

# Document Processing
beautifulsoup4 = "^4.12.3"
lxml = "^5.2.2"
pymupdf = "^1.24.9"

# AI & Vector Store
openai = "^1.3.7"
pymilvus = "^2.3.4"

# Utilities
orjson = "^3.10.6"
python-multipart = "^0.0.9"
tenacity = "^8.5.0"
structlog = "^24.4.0"
python-dotenv = "^1.0.1"

# Monitoring (Lightweight)
sentry-sdk = {extras = ["fastapi"], version = "^2.12.0"}

# Google & Firebase
firebase-admin = "^6.5.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.3.2"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-timeout = "^2.3.1"
pytest-xdist = "^3.6.1"
httpx = "^0.27.0"
faker = "^26.2.0"
factory-boy = "^3.3.0"
freezegun = "^1.5.1"

# Code Quality
ruff = "^0.5.7"
black = "^24.4.2"
mypy = "^1.11.1"
isort = "^5.13.2"
bandit = {extras = ["toml"], version = "^1.7.9"}
safety = "^3.2.4"

# Type Stubs
types-redis = "^4.6.0"
types-requests = "^2.32.0"
types-python-jose = "^3.3.4"
types-passlib = "^1.7.7"
types-python-dateutil = "^2.9.0"
types-aiofiles = "^24.1.0"

# Development Tools
pre-commit = "^3.8.0"
ipython = "^8.26.0"
ipdb = "^0.13.13"
rich = "^13.7.1"
typer = "^0.12.3"

# Documentation
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.31"
mkdocstrings = {extras = ["python"], version = "^0.25.2"}
detect-secrets = "^1.5.0"

# ML group removed - using OpenAI API instead of local models

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Tool Configurations

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from
    "SIM105", # contextlib.suppress
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ARG", "S101"]  # Allow unused arguments and assert in tests

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
show_error_codes = true
show_error_context = true
pretty = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "pymilvus.*",
    "openai.*",
    "pymupdf.*",
    "mangum.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-ra --strict-markers --strict-config --cov=api --cov=libs --cov-branch --cov-report=term-missing:skip-covered --cov-report=html:reports/coverage --cov-report=xml --cov-fail-under=80 --maxfail=1 --tb=short --asyncio-mode=auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "requires_openai: Tests that require OpenAI API",
    "requires_milvus: Tests that require Milvus connection",
]

[tool.coverage.run]
source = ["services", "libs"]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
targets = ["services", "libs"]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]  # Skip assert_used and shell_without_shell_equals_true

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true