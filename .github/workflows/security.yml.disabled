# Security Scanning Pipeline for RightLine
#
# CURRENTLY DISABLED FOR SOLO DEVELOPMENT
# To enable: Rename this file from security.yml.disabled to security.yml
#
# Comprehensive security scanning including:
# - Dependency vulnerabilities (Dependabot, Safety)
# - Container scanning (Trivy)
# - Static analysis (Semgrep, CodeQL)
# - Secret detection

name: Security Scan

on:
  # Uncomment when ready to enable
  # push:
  #   branches: [main]
  # pull_request:
  #   branches: [main]
  # schedule:
  #   # Run daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  
  # For now, only manual trigger
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerabilities
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Run Safety check
        uses: pyupio/safety@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          continue-on-error: true

      - name: Run pip-audit
        uses: pypa/gh-action-pip-audit@v1
        with:
          inputs: requirements.txt
          summary: true
          vulnerability-service: osv
          
  # Container scanning with Trivy
  container-scan:
    name: Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -t rightline:scan-${{ github.sha }} .
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rightline:scan-${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail the build

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy in table format for summary
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'rightline:scan-${{ github.sha }}'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  # SAST with Semgrep
  semgrep-scan:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container:
      image: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep ci \
            --config=auto \
            --config=p/security-audit \
            --config=p/python \
            --config=p/owasp-top-ten \
            --config=p/django \
            --json \
            --output=semgrep-results.json \
            || true

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: semgrep-results.json

      - name: Convert to SARIF and upload
        if: always()
        run: |
          semgrep ci \
            --config=auto \
            --sarif \
            --output=semgrep.sarif \
            || true

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # CodeQL analysis
  codeql-analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better detection

      - name: Detect secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-licenses
        run: |
          pip install pip-licenses

      - name: Check licenses
        run: |
          pip-licenses --from=mixed \
            --format=json \
            --output-file=licenses.json \
            --fail-on="GPL;LGPL;AGPL;OSL"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  # Security summary
  security-summary:
    name: Security Summary
    needs: [dependency-scan, container-scan, semgrep-scan, codeql-analyze, secret-scan, license-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep SAST | ${{ needs.semgrep-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql-analyze.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
