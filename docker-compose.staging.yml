# Docker Compose for Staging Environment
# Optimized for testing and validation
version: '3.9'

x-common-env: &common-env
  APP_ENV: staging
  LOG_LEVEL: DEBUG
  SENTRY_DSN: ${SENTRY_DSN_STAGING}
  OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # API Gateway
  api:
    image: ghcr.io/lunexa-ai/rightline/api:${VERSION:-latest}
    container_name: rightline-api-staging
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      <<: *common-env
      DATABASE_URL: postgresql://rightline:${DB_PASSWORD}@postgres:5432/rightline_staging
      REDIS_URL: redis://redis:6379/0
      MEILISEARCH_URL: http://meilisearch:7700
      QDRANT_URL: http://qdrant:6333
      SECRET_KEY: ${SECRET_KEY_STAGING}
      WHATSAPP_TOKEN: ${WHATSAPP_TOKEN_STAGING}
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN_STAGING}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Ingestion Service
  ingestion:
    image: ghcr.io/lunexa-ai/rightline/ingestion:${VERSION:-latest}
    container_name: rightline-ingestion-staging
    restart: unless-stopped
    environment:
      <<: *common-env
      DATABASE_URL: postgresql://rightline:${DB_PASSWORD}@postgres:5432/rightline_staging
      REDIS_URL: redis://redis:6379/0
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # Retrieval Service
  retrieval:
    image: ghcr.io/lunexa-ai/rightline/retrieval:${VERSION:-latest}
    container_name: rightline-retrieval-staging
    restart: unless-stopped
    environment:
      <<: *common-env
      DATABASE_URL: postgresql://rightline:${DB_PASSWORD}@postgres:5432/rightline_staging
      REDIS_URL: redis://redis:6379/0
      MEILISEARCH_URL: http://meilisearch:7700
      MEILISEARCH_KEY: ${MEILISEARCH_KEY_STAGING}
      QDRANT_URL: http://qdrant:6333
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Summarizer Service
  summarizer:
    image: ghcr.io/lunexa-ai/rightline/summarizer:${VERSION:-latest}
    container_name: rightline-summarizer-staging
    restart: unless-stopped
    environment:
      <<: *common-env
      MODEL_PATH: /models
      DEVICE: cpu
      BATCH_SIZE: 4
      MAX_LENGTH: 512
    volumes:
      - ./models:/models:ro
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: rightline-postgres-staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: rightline_staging
      POSTGRES_USER: rightline
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres-data-staging:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U rightline -d rightline_staging"]
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # Redis
  redis:
    image: redis:7-alpine
    container_name: rightline-redis-staging
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data-staging:/data
    ports:
      - "6379:6379"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Meilisearch
  meilisearch:
    image: getmeili/meilisearch:v1.9
    container_name: rightline-meilisearch-staging
    restart: unless-stopped
    environment:
      MEILI_ENV: staging
      MEILI_MASTER_KEY: ${MEILISEARCH_KEY_STAGING}
      MEILI_NO_ANALYTICS: "true"
      MEILI_LOG_LEVEL: INFO
    volumes:
      - meilisearch-data-staging:/meili_data
    ports:
      - "7700:7700"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Qdrant
  qdrant:
    image: qdrant/qdrant:v1.10.1
    container_name: rightline-qdrant-staging
    restart: unless-stopped
    environment:
      QDRANT__LOG_LEVEL: INFO
    volumes:
      - qdrant-data-staging:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: rightline-minio-staging
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: http://minio-console.staging.rightline.zw
    volumes:
      - minio-data-staging:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "mc", "ready", "local"]
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rightline-nginx-staging
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "nginx", "-t"]
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: rightline-prometheus-staging
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data-staging:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: rightline-grafana-staging
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD_STAGING}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana-data-staging:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - rightline-staging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  rightline-staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data-staging:
  redis-data-staging:
  meilisearch-data-staging:
  qdrant-data-staging:
  minio-data-staging:
  prometheus-data-staging:
  grafana-data-staging:
