# Docker Compose for Production Environment
# Optimized for performance, security, and reliability
version: '3.9'

x-common-env: &common-env
  APP_ENV: production
  LOG_LEVEL: INFO
  SENTRY_DSN: ${SENTRY_DSN_PRODUCTION}
  OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 60s

x-restart-policy: &restart-policy
  restart: always

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "10"
    labels: "service,environment"

services:
  # API Gateway - Blue Environment
  api-blue:
    image: ghcr.io/lunexa-ai/rightline/api:${VERSION:-stable}
    container_name: rightline-api-blue
    <<: *restart-policy
    environment:
      <<: *common-env
      DEPLOYMENT_ENV: blue
      DATABASE_URL: postgresql://rightline:${DB_PASSWORD}@postgres-primary:5432/rightline_production
      DATABASE_REPLICA_URL: postgresql://rightline:${DB_PASSWORD}@postgres-replica:5432/rightline_production
      REDIS_URL: redis://redis-primary:6379/0
      REDIS_REPLICA_URL: redis://redis-replica:6379/0
      MEILISEARCH_URL: http://meilisearch:7700
      QDRANT_URL: http://qdrant:6333
      SECRET_KEY: ${SECRET_KEY_PRODUCTION}
      WHATSAPP_TOKEN: ${WHATSAPP_TOKEN_PRODUCTION}
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN_PRODUCTION}
      RATE_LIMIT_PER_MINUTE: 60
      REQUEST_TIMEOUT_MS: 2000
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-primary:
        condition: service_healthy
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

  # API Gateway - Green Environment
  api-green:
    image: ghcr.io/lunexa-ai/rightline/api:${VERSION_GREEN:-stable}
    container_name: rightline-api-green
    <<: *restart-policy
    environment:
      <<: *common-env
      DEPLOYMENT_ENV: green
      DATABASE_URL: postgresql://rightline:${DB_PASSWORD}@postgres-primary:5432/rightline_production
      DATABASE_REPLICA_URL: postgresql://rightline:${DB_PASSWORD}@postgres-replica:5432/rightline_production
      REDIS_URL: redis://redis-primary:6379/0
      REDIS_REPLICA_URL: redis://redis-replica:6379/0
      MEILISEARCH_URL: http://meilisearch:7700
      QDRANT_URL: http://qdrant:6333
      SECRET_KEY: ${SECRET_KEY_PRODUCTION}
      WHATSAPP_TOKEN: ${WHATSAPP_TOKEN_PRODUCTION}
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN_PRODUCTION}
      RATE_LIMIT_PER_MINUTE: 60
      REQUEST_TIMEOUT_MS: 2000
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-primary:
        condition: service_healthy
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Ingestion Service
  ingestion:
    image: ghcr.io/lunexa-ai/rightline/ingestion:${VERSION:-stable}
    container_name: rightline-ingestion
    <<: *restart-policy
    environment:
      <<: *common-env
      DATABASE_URL: postgresql://rightline:${DB_PASSWORD}@postgres-primary:5432/rightline_production
      REDIS_URL: redis://redis-primary:6379/0
      MINIO_URL: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      WORKER_CONCURRENCY: 4
      BATCH_SIZE: 100
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-primary:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G

  # Retrieval Service
  retrieval:
    image: ghcr.io/lunexa-ai/rightline/retrieval:${VERSION:-stable}
    container_name: rightline-retrieval
    <<: *restart-policy
    environment:
      <<: *common-env
      DATABASE_URL: postgresql://rightline:${DB_PASSWORD}@postgres-replica:5432/rightline_production
      REDIS_URL: redis://redis-primary:6379/0
      MEILISEARCH_URL: http://meilisearch:7700
      MEILISEARCH_KEY: ${MEILISEARCH_KEY_PRODUCTION}
      QDRANT_URL: http://qdrant:6333
      CACHE_TTL_SECONDS: 3600
      MAX_RESULTS: 10
    depends_on:
      postgres-replica:
        condition: service_healthy
      redis-primary:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Summarizer Service
  summarizer:
    image: ghcr.io/lunexa-ai/rightline/summarizer:${VERSION:-stable}
    container_name: rightline-summarizer
    <<: *restart-policy
    environment:
      <<: *common-env
      MODEL_PATH: /models
      DEVICE: cpu
      BATCH_SIZE: 8
      MAX_LENGTH: 512
      NUM_THREADS: 4
      CACHE_SIZE: 1000
    volumes:
      - ./models:/models:ro
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G

  # PostgreSQL Primary with pgvector
  postgres-primary:
    image: pgvector/pgvector:pg15
    container_name: rightline-postgres-primary
    <<: *restart-policy
    environment:
      POSTGRES_DB: rightline_production
      POSTGRES_USER: rightline
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${DB_REPLICATION_PASSWORD}
      # Performance tuning
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 1GB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 3GB
      POSTGRES_MAINTENANCE_WORK_MEM: 256MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
    volumes:
      - postgres-data-primary:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres-backup:/backup
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U rightline -d rightline_production"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G

  # PostgreSQL Read Replica
  postgres-replica:
    image: pgvector/pgvector:pg15
    container_name: rightline-postgres-replica
    <<: *restart-policy
    environment:
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_HOST: postgres-primary
      POSTGRES_MASTER_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${DB_REPLICATION_PASSWORD}
    volumes:
      - postgres-data-replica:/var/lib/postgresql/data
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U rightline -d rightline_production"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Redis Primary
  redis-primary:
    image: redis:7-alpine
    container_name: rightline-redis-primary
    <<: *restart-policy
    command: >
      redis-server
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data-primary:/data
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Replica
  redis-replica:
    image: redis:7-alpine
    container_name: rightline-redis-replica
    <<: *restart-policy
    command: redis-server --replicaof redis-primary 6379
    volumes:
      - redis-data-replica:/data
    depends_on:
      redis-primary:
        condition: service_healthy
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Meilisearch
  meilisearch:
    image: getmeili/meilisearch:v1.9
    container_name: rightline-meilisearch
    <<: *restart-policy
    environment:
      MEILI_ENV: production
      MEILI_MASTER_KEY: ${MEILISEARCH_KEY_PRODUCTION}
      MEILI_NO_ANALYTICS: "true"
      MEILI_LOG_LEVEL: WARN
      MEILI_MAX_INDEXING_MEMORY: 2GB
      MEILI_MAX_INDEXING_THREADS: 4
    volumes:
      - meilisearch-data:/meili_data
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Qdrant
  qdrant:
    image: qdrant/qdrant:v1.10.1
    container_name: rightline-qdrant
    <<: *restart-policy
    environment:
      QDRANT__LOG_LEVEL: WARN
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
      QDRANT__STORAGE__SNAPSHOTS_PATH: /qdrant/snapshots
    volumes:
      - qdrant-data:/qdrant/storage
      - qdrant-snapshots:/qdrant/snapshots
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # MinIO Cluster
  minio:
    image: minio/minio:latest
    container_name: rightline-minio
    <<: *restart-policy
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - minio-data:/data
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "mc", "ready", "local"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # HAProxy Load Balancer
  haproxy:
    image: haproxy:alpine
    container_name: rightline-haproxy
    <<: *restart-policy
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # Stats page
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./haproxy/ssl:/etc/ssl/certs:ro
    depends_on:
      - api-blue
      - api-green
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "haproxy", "-c", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
    networks:
      - rightline-production
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

networks:
  rightline-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres-data-primary:
    driver: local
  postgres-data-replica:
    driver: local
  postgres-backup:
    driver: local
  redis-data-primary:
    driver: local
  redis-data-replica:
    driver: local
  meilisearch-data:
    driver: local
  qdrant-data:
    driver: local
  qdrant-snapshots:
    driver: local
  minio-data:
    driver: local
